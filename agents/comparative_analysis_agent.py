import openai
from serpapi import GoogleSearch
import os

openai.api_key = os.getenv("OPENAI_API_KEY")


def serpapi_search(query: str, serpapi_api_key: str, num_results: int = 5):
    """
    Performs a SerpApi (Google) search for the given 'query'.
    Returns a list of top search results (title, snippet, link).

    Args:
        query (str): The search query (e.g., "How do cities like Tokyo address demographic aging?")
        serpapi_api_key (str): Your SerpApi key
        num_results (int): How many results to fetch

    Returns:
        A list of dictionaries with 'title', 'snippet', and 'link' for each result.
    """
    params = {
        "q": query,
        "api_key": serpapi_api_key,
        "num": num_results,  # Attempt to limit the number of results
        "hl": "en",
    }
    search = GoogleSearch(params)
    result = search.get_dict()

    # SerpApi returns a variety of different fields,
    # we focus on 'organic_results' (Google's standard results)
    organic_results = result.get("organic_results", [])
    results_list = []

    for item in organic_results[:num_results]:
        title = item.get("title", "")
        snippet = item.get("snippet", "")
        link = item.get("link", "")

        results_list.append({"title": title, "snippet": snippet, "link": link})

    return results_list


def summarize_search_results(results: list, user_query: str) -> str:
    """
    Summarizes the search results using OpenAI.

    Args:
        results (list): A list of dicts with fields 'title', 'snippet', 'link'
        user_query (str): The original user query

    Returns:
        A summary string generated by OpenAI.
    """

    combined_text = []
    for r in results:
        combined_text.append(
            f"Title: {r['title']}\n" f"Snippet: {r['snippet']}\n" f"Link: {r['link']}\n"
        )
    combined_text_str = "\n---\n".join(combined_text)

    system_prompt = (
        "You are a helpful research assistant. A user has performed a web search. "
        "You have the following web search results."
        "You will attempt to answer the user's query in a clear, detailed manner. If there is missing information, "
        "just state that it wasn't found in the search results."
    )

    user_content = (
        f"User query: {user_query}\n"
        f"Search results:\n{combined_text_str}"
        "\n\nPlease provide a helpful answer. In this format: "
        "Case study 1: ..."
        "Key insights for case study and lessons learnt"
        "Case study 2: ..."
        "And so on for 5 case studies"
    )

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_content},
        ],
        temperature=0.5,
        max_tokens=600,
    )

    return response.choices[0].message['content'].strip()


def generate_comparative_analysis(user_query: str) -> str:
    """
    High-level function that ties it all together:
      1. Uses SerpApi to get search results for 'user_query'
      2. Summarizes those results with OpenAI
      3. Returns the final summary/answer
    """
    # 1. Get search results
    serpapi_api_key = os.environ["SERPAPI_API_KEY"]
    results = serpapi_search(user_query, serpapi_api_key, num_results=5)

    # 2. Summarize them
    summary = summarize_search_results(results, user_query)

    return summary